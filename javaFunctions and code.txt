import java.util.*;
import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        // Arrays (Массивы).
        // Статичный размер, обращение к элементу за O(1).
        int[] testArray = new int[10];

        for (int i = 0; i < 10; i++) {
            testArray[i] = i;
        }

        // Arrays.toString(arrayName) - метод класса Arrays, который вернёт строковое представление массива.
        System.out.println(Arrays.toString(testArray));

        System.out.println("\n================");

        // List<Integer> al = new ArrayList<>();
        ArrayList<Integer> al = new ArrayList<>();

        System.out.println(al);

        // Можно задать изначальный размер контейнера.
        List<Integer> la = new ArrayList<>(10);

        // Обращение к элементу за O(1*) и через ArrayListName.get(index), iterator или for-each
        for (int i = 0; i < 10; i++) {
            al.add(i);
        }

        System.out.println("\n================");
        for (int i = 0; i < al.size(); ++i) {
            System.out.print(al.get(i) + " ");
        }

        // List<Integer> ll = new LinkedList<>();
        LinkedList<Integer> ll = new LinkedList<>();

        // LinkedList - добавление и удаление за O(1), обращение за O(n)

        /*
         * Arrays.fill(arrayName, element) - заполнение массива arrayName элементом element
         * int[] b = array.clone() - клонирование array в b
         * System.arraycopy(arrFrom, fromArr1, arrTo, fromArr2, toArr2); - клонирование
         * из arrFrom, начиная с fromArr1, в arrTo, начиная с fromArr2 до toArr2
         * ArrayListName.toArray() - Возвращает ArrayList в виде статического массива
         * Arrays.equals(arrayOne, arrayTwo) - сравнение двух массивов
         * Arrays.sort(array) - сортировка массива array (n log n)
         * */

        // Iterator & Comparator
        Iterator<Integer> it = al.iterator();

        // Итераторы нужны для итерирования коллекций
        // Компараторы - своё правило сравнения. Обычно для Arrays.sort() и подобного
        // Пример компараторы - на платформе Innovation Campus 4.1.x (Прочитать)
    }

    // Сортировка методом пузырька. Наивная. O(n^2)
    public void bubbleSortNaive(int[] array) {
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array.length - 1; j++) {
                if (array[j] > array[j + 1]) {
                    int a = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = a;
                }
            }
        }
    }

    // Сортировка слиянием. O(n log n)
    public static void mergeSort(int[] a, int n) {
        if (n < 2) {
            return;
        }
        int mid = n / 2;
        int[] l = new int[mid];
        int[] r = new int[n - mid];

        for (int i = 0; i < mid; i++) {
            l[i] = a[i];
        }
        for (int i = mid; i < n; i++) {
            r[i - mid] = a[i];
        }
        mergeSort(l, mid);
        mergeSort(r, n - mid);

        merge(a, l, r, mid, n - mid);
    }

    // Функция слияния для сортировки слиянием.
    public static void merge(
            int[] a, int[] l, int[] r, int left, int right) {

        int i = 0, j = 0, k = 0;
        while (i < left && j < right) {
            if (l[i] <= r[j]) {
                a[k++] = l[i++];
            } else {
                a[k++] = r[j++];
            }
        }
        while (i < left) {
            a[k++] = l[i++];
        }
        while (j < right) {
            a[k++] = r[j++];
        }
    }


    // Двоичный поиск. (log n)
    public int runBinarySearchIteratively(int[] sortedArray, int key, int low, int high) {
        int index = Integer.MAX_VALUE;

        while (low <= high) {
            int mid = low + ((high - low) / 2);
            if (sortedArray[mid] < key) {
                low = mid + 1;
            } else if (sortedArray[mid] > key) {
                high = mid - 1;
            } else if (sortedArray[mid] == key) {
                index = mid;
                break;
            }
        }
        return index;
    }

    // Сайт со всеми алгоритмами - The Algorithms.
    // Также полезен бывает Baeldung :)

    public void FirstTask() {
        Scanner sc = new Scanner(System.in);

        int N = sc.nextInt();
        ArrayList<Integer> myList = new ArrayList<>();
        int cnt = 0;

        for (int i = 0; i < N; i++) {
            myList.add(sc.nextInt());
        }

        for (int i = 1; i < N; i++) {
            if (myList.get(i) > myList.get(i - 1)) {
                cnt++;
            }
        }

        System.out.println(cnt);
    }

    public void SecondTask() {
        Scanner sc = new Scanner(System.in);

        int N = sc.nextInt();
        ArrayList<Integer> arr = new ArrayList<>();

        for (int i = 0; i < N; i++) {
            arr.add(sc.nextInt());
        }

        arr.add(0, arr.get(arr.size() - 1)); // lower Java
        // arr.addFirst(arr.getLast()); - Java 21
        arr.remove(arr.size() - 1);

        for (int i : arr) {
            System.out.print(i + " ");
        }
    }

    public void ThirdTask() {
        Scanner sc = new Scanner(System.in);

        int N = sc.nextInt();
        ArrayList<Integer> myList = new ArrayList<>();

        for (int i = 0; i < N; i++) {
            myList.add(sc.nextInt());
        }

        int mx = Integer.MIN_VALUE;

        Iterator<Integer> it = myList.iterator();

        while (it.hasNext()) {
            int now = it.next();
            if (now > mx) mx = now;
        }

        System.out.println(mx);
    }
}